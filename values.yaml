# ðŸš€ ScriptSynthCore Phase 4 - Helm Chart Values
# Production-ready distributed arena configuration

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "gp3"

# Application configuration
app:
  name: scriptsynthcore
  version: "4.0.0"
  environment: "production"
  
# Image configuration
image:
  registry: docker.io
  repository: scriptsynthcore/distributed-arena
  tag: "4.0.0"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Replica configuration
replicaCount: 3

# Service account configuration
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: ""  # Set via Terraform IRSA
  name: "arena-service-account"

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# Resource configuration
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
    ephemeral-storage: 10Gi
  requests:
    cpu: 500m
    memory: 1Gi
    ephemeral-storage: 1Gi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2
  maxUnavailable: null

# Node selection
nodeSelector:
  role: compute
  workload: arena-nodes

# Tolerations for compute-optimized nodes
tolerations:
  - key: compute-optimized
    operator: Equal
    value: "true"
    effect: NoSchedule

# Pod affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - scriptsynthcore
        topologyKey: kubernetes.io/hostname

# Service configuration
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"

# Ingress configuration
ingress:
  enabled: true
  className: "alb"
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/certificate-arn: ""  # Set via environment
  hosts:
    - host: arena.scriptsynthcore.dev
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: scriptsynthcore-tls
      hosts:
        - arena.scriptsynthcore.dev

# Environment variables
env:
  - name: NODE_ENV
    value: "production"
  - name: LOG_LEVEL
    value: "info"
  - name: DISTRIBUTED_ARENA_ENABLED
    value: "true"
  - name: FEDERATED_LEARNING_ENABLED
    value: "true"
  - name: LIVE_REWARD_DIAL_ENABLED
    value: "true"
  - name: ARENA_NODE_ID
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: KUBERNETES_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace

# Configuration from ConfigMap
configMap:
  enabled: true
  data:
    config.yaml: |
      arena:
        node_id: "$(ARENA_NODE_ID)"
        peers: []
        cluster_config:
          region: "us-west-2"
          environment: "production"
      
      federated_optimizer:
        dim: 100
        scheme: "fedavg"
        
      gossip_layer:
        peers: []
        
      reward_dial:
        update_interval: 5.0
        
      monitoring:
        prometheus_enabled: true
        grafana_enabled: true
        
      security:
        mtls_enabled: true
        rbac_enabled: true

# Secrets configuration
secrets:
  enabled: true
  data: {}  # Populated by External Secrets Operator

# Persistent Volume Claims
persistence:
  enabled: true
  storageClass: "gp3"
  accessMode: ReadWriteOnce
  size: 50Gi
  annotations: {}

# Probes configuration
probes:
  liveness:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  
  readiness:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
  
  startup:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

# Monitoring configuration
monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9090"
      prometheus.io/path: "/metrics"
  
  grafana:
    enabled: true
    dashboards:
      enabled: true
    
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 30s
    scrapeTimeout: 10s

# Networking configuration
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: istio-system
      - namespaceSelector:
          matchLabels:
            name: monitoring
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: scriptsynthcore
  egress:
    - to: []
      ports:
      - protocol: TCP
        port: 443
      - protocol: TCP
        port: 80
      - protocol: TCP
        port: 5432  # PostgreSQL
      - protocol: TCP
        port: 6379  # Redis

# External dependencies
redis:
  enabled: true
  auth:
    enabled: true
    password: ""  # Set via External Secrets
  master:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "gp3"
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "gp3"

postgresql:
  enabled: true
  auth:
    postgresPassword: ""  # Set via External Secrets
    database: scriptsynthcore
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: "gp3"
  readReplicas:
    replicaCount: 1
    persistence:
      enabled: true
      size: 100Gi
      storageClass: "gp3"

# External Secrets Operator integration
externalSecrets:
  enabled: true
  secretStore:
    provider: aws
    region: us-west-2
  secrets:
    database:
      name: scriptsynthcore-database
      refreshInterval: 1h
      data:
        - secretKey: password
          remoteRef:
            key: scriptsynthcore/database
            property: password
    redis:
      name: scriptsynthcore-redis
      refreshInterval: 1h
      data:
        - secretKey: password
          remoteRef:
            key: scriptsynthcore/redis
            property: password

# Istio service mesh configuration
istio:
  enabled: true
  virtualService:
    enabled: true
    gateways:
      - istio-system/scriptsynthcore-gateway
    hosts:
      - arena.scriptsynthcore.dev
    http:
      - match:
        - uri:
            prefix: /
        route:
        - destination:
            host: scriptsynthcore
            port:
              number: 8080
        timeout: 30s
        retries:
          attempts: 3
          perTryTimeout: 10s
  
  destinationRule:
    enabled: true
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
      connectionPool:
        tcp:
          maxConnections: 100
        http:
          http1MaxPendingRequests: 50
          maxRequestsPerConnection: 10
      circuitBreaker:
        consecutiveErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50

# Chaos Engineering with ChaosMesh
chaos:
  enabled: false  # Enable for chaos testing
  experiments:
    podKill:
      enabled: false
      schedule: "0 2 * * *"  # Daily at 2 AM
      duration: "10m"
    networkDelay:
      enabled: false
      schedule: "0 3 * * *"  # Daily at 3 AM
      duration: "5m" 