
import React, { useState, useEffect, useCallback } from 'react';
import {
  Box,
  Paper,
  Typography,
  CircularProgress,
  Alert,
  Button,
  Card,
  CardContent,
  CardActions
} from '@mui/material';
import { motion } from 'framer-motion';

interface V7AnalyticsDashboardProps {
  agentId?: string;
  refreshInterval?: number;
  onUpdate?: (data: any) => void;
}

interface V7AnalyticsDashboardData {
  status: string;
  metrics: Record<string, any>;
  lastUpdate: Date;
}

/**
 * V7AnalyticsDashboard Component
 * 
 * Elite AI Agent System dashboard component for Advanced analytics dashboard with live configuration.
 * Generated by Elite Scaffold Generator.
 */
export const V7AnalyticsDashboard: React.FC<V7AnalyticsDashboardProps> = ({
  agentId = 'default',
  refreshInterval = 5000,
  onUpdate
}) => {
  const [data, setData] = useState<V7AnalyticsDashboardData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch data from Elite AI System API
  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(`/api/agents/${agentId}/v7-analytics-dashboard`);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      const newData: V7AnalyticsDashboardData = {
        status: result.status || 'unknown',
        metrics: result.metrics || {},
        lastUpdate: new Date()
      };

      setData(newData);
      onUpdate?.(newData);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error';
      setError(errorMessage);
      console.error('Failed to fetch v7_analytics_dashboard data:', err);
    } finally {
      setLoading(false);
    }
  }, [agentId, onUpdate]);

  // Auto-refresh effect
  useEffect(() => {
    fetchData();

    if (refreshInterval > 0) {
      const interval = setInterval(fetchData, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [fetchData, refreshInterval]);

  // Loading state
  if (loading && !data) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
        <CircularProgress />
        <Typography variant="body2" ml={2}>
          Loading Advanced analytics dashboard with live configuration...
        </Typography>
      </Box>
    );
  }

  // Error state
  if (error) {
    return (
      <Alert 
        severity="error" 
        action={
          <Button color="inherit" size="small" onClick={fetchData}>
            Retry
          </Button>
        }
      >
        Failed to load Advanced analytics dashboard with live configuration: {error}
      </Alert>
    );
  }

  // Main component render
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Paper
        elevation={3}
        sx={{
          p: 3,
          background: 'linear-gradient(135deg, rgba(144, 202, 249, 0.1) 0%, rgba(144, 202, 249, 0.05) 100%)',
          border: '1px solid rgba(144, 202, 249, 0.2)',
          borderRadius: 2
        }}
      >
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h6" component="h2">
            Advanced analytics dashboard with live configuration
          </Typography>
          <Button
            variant="outlined"
            size="small"
            onClick={fetchData}
            disabled={loading}
          >
            {loading ? 'Refreshing...' : 'Refresh'}
          </Button>
        </Box>

        {data && (
          <Card variant="outlined">
            <CardContent>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                Agent: {agentId}
              </Typography>

              <Typography variant="h6" component="div" gutterBottom>
                Status: {data.status}
              </Typography>

              <Box mt={2}>
                <Typography variant="subtitle2" gutterBottom>
                  Metrics:
                </Typography>
                <Box component="pre" sx={{ fontSize: '0.875rem', overflow: 'auto' }}>
                  {JSON.stringify(data.metrics, null, 2)}
                </Box>
              </Box>
            </CardContent>

            <CardActions>
              <Typography variant="caption" color="text.secondary">
                Last updated: {data.lastUpdate.toLocaleTimeString()}
              </Typography>
            </CardActions>
          </Card>
        )}
      </Paper>
    </motion.div>
  );
};

export default V7AnalyticsDashboard;
