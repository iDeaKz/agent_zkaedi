
"""
Test module for quantum_signal_processor agent.
Generated by Elite Scaffold Generator.
"""

import pytest
import asyncio
from unittest.mock import Mock, patch

from src.agents.quantum_signal_processor import QuantumSignalProcessorAgent, QuantumSignalProcessorConfig, create_quantum_signal_processor_agent

class TestQuantumSignalProcessorAgent:
    """Test suite for QuantumSignalProcessorAgent."""

    def setup_method(self):
        """Setup test fixtures."""
        self.config = QuantumSignalProcessorConfig()
        self.agent = QuantumSignalProcessorAgent(self.config)

    def test_initialization(self):
        """Test agent initialization."""
        assert self.agent.config == self.config
        assert self.agent.state.agent_id == "quantum_signal_processor"
        assert len(self.agent.metrics_history) == 0

    @pytest.mark.asyncio
    async def test_process_text_input(self):
        """Test text input processing."""
        response = await self.agent.process_input(text="Hello world")

        assert 'response' in response
        assert 'confidence' in response
        assert 'processing_time' in response
        assert 'text_analysis' in response['response']

    @pytest.mark.asyncio
    async def test_process_multimodal_input(self):
        """Test multi-modal input processing."""
        response = await self.agent.process_input(
            text="Test message",
            image=b"fake_image_data",
            audio=b"fake_audio_data"
        )

        assert response['confidence'] > 0
        assert len(response['modalities_used']) == 3

    @pytest.mark.asyncio
    async def test_no_input_raises_error(self):
        """Test that no input raises ValueError."""
        with pytest.raises(ValueError, match="At least one input modality required"):
            await self.agent.process_input()

    def test_health_status(self):
        """Test health status reporting."""
        health = self.agent.get_health_status()

        assert health['agent_id'] == "quantum_signal_processor"
        assert 'status' in health
        assert 'config' in health
        assert 'metrics_count' in health

def test_factory_function():
    """Test agent factory function."""
    agent = create_quantum_signal_processor_agent()
    assert isinstance(agent, QuantumSignalProcessorAgent)
    assert agent.config.monitoring_enabled is True

def test_factory_function_with_overrides():
    """Test agent factory function with config overrides."""
    overrides = {'monitoring_enabled': False, 'max_memory_mb': 2048}
    agent = create_quantum_signal_processor_agent(overrides)

    assert agent.config.monitoring_enabled is False
    assert agent.config.max_memory_mb == 2048
